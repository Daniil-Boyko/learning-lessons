<?php

// new different functions to the main object

namespace testingPatterns\DecoratorPattern;

interface Component
{
    public function decorate(): string;
}

class InitComponent implements Component
{
    public function decorate(): string
    {
        // TODO: Implement decorate() method.
        return "COMPONENT";
    }
}

class InitDecorator implements Component
{
    public Component $component;

    public function __construct(Component $component)
    {
        $this->component = $component;
    }

    public function decorate(): string
    {
        // TODO: Implement decorate() method.
        return $this->component->decorate();
    }
}

class Decorator1 extends InitDecorator
{
    public function decorate(): string
    {
        return 'DECORATOR_1(' . parent::decorate() . ')'; // TODO: Change the autogenerated stub
    }
}

class Decorator2 extends InitDecorator
{
    public function decorate(): string
    {
        return 'DECORATOR_2(' . parent::decorate() . ')'; // TODO: Change the autogenerated stub
    }
}

function getCode(Component $component): void
{
    echo 'RESULT: ' . $component->decorate() . PHP_EOL;
}

$product = new InitComponent();
getCode($product);

$decorator_1 = new Decorator1($product);
$decorator_2 = new Decorator2($decorator_1);
getCode($decorator_2);
