<?php

namespace TestingPatterns\StructuralPatterns\Decorator;

interface DecoratorInterface
{
    public function decorate(): string;
}

class BaseComponent implements DecoratorInterface
{
    public function decorate(): string
    {
        // TODO: Implement decorate() method.
        return 'BASE_COMPONENT';
    }
}

class BaseDecorator implements DecoratorInterface
{
    public DecoratorInterface $decorator;

    public function __construct(DecoratorInterface $decorator)
    {
        $this->decorator = $decorator;
    }

    public function decorate(): string
    {
        // TODO: Implement decorate() method.
        return $this->decorator->decorate();
    }
}

class Decorator1 extends BaseDecorator
{
    public function decorate(): string
    {
        // TODO: Change the autogenerated stub
        return 'DECORATOR_1(' . parent::decorate() . ')';
    }
}

class Decorator2 extends BaseDecorator
{
    public function decorate(): string
    {
        // TODO: Change the autogenerated stub
        return 'DECORATOR_2(' . parent::decorate() . ')';
    }
}

function decorateProduct(DecoratorInterface $decorator): void
{
    echo 'RESULT: ' . $decorator->decorate() . PHP_EOL;
}

$baseComponent = new BaseComponent();
decorateProduct($baseComponent);

$firstDecoratorObject = new Decorator1($baseComponent);
$secondDecoratorObject = new Decorator2($firstDecoratorObject);
decorateProduct($secondDecoratorObject);
