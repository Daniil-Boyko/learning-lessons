<?php

namespace testingPatterns\GeneratingPatterns\Chain;

interface Handler
{
    public function setNext(Handler $handler);

    public function handle(string $text);
}

abstract class AbstractHandler implements Handler
{
    private $abstractHandler;

    public function setNext(Handler $handler): Handler
    {
        $this->abstractHandler = $handler;
        return $handler;
        // TODO: Implement setNext() method.
    }

    public function handle(string $text)
    {
        if ($this->abstractHandler) {
            $this->abstractHandler->handle($text);
        } else {
            return null;
        }
    }
}

class SlowCar extends AbstractHandler
{
    public function handle(string $text): ?string
    {
        if ($text == 'Slow') {
            return $text . PHP_EOL;
        } else {
            return parent::handle($text); // TODO: Change the autogenerated stub
        }
    }
}

class MiddleCar extends AbstractHandler
{
    public function handle(string $text)
    {
        if ($text == 'Middle') {
            return $text . PHP_EOL;
        } else {
            return parent::handle($text); // TODO: Change the autogenerated stub
        }
    }
}

class FastCar extends AbstractHandler
{
    public function handle(string $text)
    {
        if ($text == 'Fast') {
            return $text . PHP_EOL;
        } else {
            return parent::handle($text); // TODO: Change the autogenerated stub
        }
    }
}

function clientCode(Handler $handler): void
{
    foreach (['Slow', 'Middle', 'Fast'] as $element)
    {
        $result = $handler->handle($element);
        if ($result) {
            echo $result;
        } else {
            echo 'Unknown Component' . PHP_EOL;
        }
    }

    echo PHP_EOL . PHP_EOL;
}

$slowCar = new SlowCar();
$middleCar = new MiddleCar();
$fastCar = new FastCar();

$slowCar->setNext($middleCar)->setNext($fastCar);
clientCode($slowCar);
clientCode($middleCar);
clientCode($fastCar);

