<?php

namespace testingPatterns\GeneratingPatterns\PracticingChain;

interface Handler
{
    public function setNext(Handler $handler);

    public function handle(string $text);
}

abstract class AbstractHandler implements Handler
{
    private $abstractHandler;

    public function setNext(Handler $handler): Handler
    {
        // TODO: Implement setNext() method.
        $this->abstractHandler = $handler;
        return $handler;
    }

    public function handle(string $text): ?string
    {
        // TODO: Implement handle() method.
        if ($this->abstractHandler) {
            return $this->abstractHandler->handle($text);
        } else {
            return null;
        }
    }
}

class Engine extends AbstractHandler
{
    public function handle(string $text): ?string
    {
        if ($text == 'V8') {
            return $text;
        } else {
            return parent::handle($text); // TODO: Change the autogenerated stub
        }
    }
}

class Wheels extends AbstractHandler
{
    public function handle(string $text): ?string
    {
        if ($text == '21mm') {
            return $text;
        } else {
            return parent::handle($text); // TODO: Change the autogenerated stub
        }
    }
}

class Factory extends AbstractHandler
{
    public function handle(string $text): ?string
    {
        if ($text == 'BMW') {
            return $text;
        } else {
            return parent::handle($text); // TODO: Change the autogenerated stub
        }
    }
}

function clientCode(Handler $handler): void
{
    foreach (['21mm', 'V8', 'BMW'] as $element)
    {
        $result = $handler->handle($element);
        if ($result) {
            echo $result . PHP_EOL;
        } else {
            echo 'Unknown Component' . PHP_EOL;
        }
    }

    echo '-------' . PHP_EOL;
}

$engine = new Engine();
$wheels = new Wheels();
$factory = new Factory();

$engine->setNext($wheels)->setNext($factory);

clientCode($engine);
clientCode($wheels);
clientCode($factory);

